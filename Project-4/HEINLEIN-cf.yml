AWSTemplateFormatVersion: 2010-09-09
Description: >-
   Creates 3 instances and 1 VPC.  Each instance gets a private IP and is pre-installed with required software.  The proxy server gets a public IP as does a NAT gateway.  The backend servers use the NAT gateway for world communications, but they do not have individual public IPs.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  # Removed SSH location
Mappings:
  AWSInstanceType2Arch:  # Supported architectures (x64bit only)
    t2.micro:
      Arch: HVM64
  AWSRegionUbuntu: # AMI for Ubuntu server in each supported region 
    us-east-1:   # N. Virginia
      PV64: NOT_SUPPORTED
      HVM64: ami-09e67e426f25ce0d7 # AMI ID for Ubuntu 20 (ubuntu + apt) - Amazon Linux 2 AMI ami-02e136e904f3da870 (ec2-user + yum)
      HVMG2: NOT_SUPPORTED
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: P4-VPC
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24 # Public Subnet Range
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: P4-public-subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24 # Private Subnet range
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: P4-private-subnet
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: P4-ig
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: P4-public-rt
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  NATIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'NATIPAddress.AllocationId' #!Ref NATIPAddress
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: P4-natgw
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: P4-private-rt
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  ProxyIPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref ProxyInstance
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access from trusted sources.  Port 80 or 443 access from appropraite sources
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.0.0.0/16 # VPC as a whole.
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 130.108.0.0/16  # WSU CIDR
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/32  # TODO Replace with home / trusted public IP
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # Port 80 from any IP
      Tags: 
        - Key: Name
          Value: P4-sg
  ProxyInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: NATGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: proxy
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
          PrivateIpAddress: 10.0.0.10 # EC Private ip between 0 and 15
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install haproxy && \
            apt-get install -y git python3 python3-pip && \
            hostnamectl set-hostname proxy && \
            reboot
  WebServ1Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: NATGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: webserv1
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
          PrivateIpAddress: 10.0.1.10 # TODO make sure unique to the instance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install apache2 && \
            apt-get install -y git && \
            hostnamectl set-hostname webserv1
            reboot

WebServ2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: NATGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - t2.micro
          - Arch
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: webserv2
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet
          PrivateIpAddress: 10.0.1.20 # TODO make sure unique to the instance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install apache2 && \
            apt-get install -y git && \
            hostnamectl set-hostname webserv2
            reboot